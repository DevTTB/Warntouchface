{"version":3,"sources":["assets/hey_sondn.mp3","App.js","reportWebVitals.js","index.js"],"names":["sound","Howl","src","soundURL","TOUCHED_LABEL","App","useState","touched","setTouched","video","useRef","canPlaySound","classifier","mobilenetModule","init","a","console","log","setupCamera","current","knnClassifier","mobilenet","Promise","resolve","reject","navigator","getUserMedia","webkitGetUserMedia","mozgetUserMedia","msGetUserMedia","stream","srcObject","addEventListener","error","train","label","i","parseInt","training","embedding","infer","addExample","sleep","run","predictClass","result","confidences","play","notify","body","initNotifications","cooldown","ms","setTimeout","useEffect","on","className","ref","autoPlay","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7af6da66.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hey_sondn.8c2f8e9b.mp3\";","import './App.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as tfjs from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\nimport {Howl} from 'howler';\nimport { initNotifications, notify } from '@mycv/f8-notification';\nimport soundURL from './assets/hey_sondn.mp3';\nimport { randomUniform } from '@tensorflow/tfjs';\n\nvar sound = new Howl({\n  src: [soundURL]\n});\n\n\nconst NOT_TOUCH_LABEL = \"not_touch\"\nconst TOUCHED_LABEL = \"touched\"\nconst TRAINING_TIMES = 50\nconst TOUCHED_CONFIDENCE = 0.8\n\n\nfunction App() { \n  const [touched, setTouched] = useState(false)\n  const video = useRef()\n  const canPlaySound = useRef(true)\n  const classifier = useRef()\n  const mobilenetModule = useRef()\n\n  const init = async () => {\n    console.log('init...')\n    await setupCamera();\n    console.log('set up camera success');\n\n    classifier.current = knnClassifier.create();\n    mobilenetModule.current = await mobilenet.load();\n\n    console.log('set up done')\n    console.log('khong cham tay len mat va bam Train 1')\n  }\n\n  const setupCamera = () => {\n    return new Promise((resolve, reject) =>{\n      navigator.getUserMedia = navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozgetUserMedia ||\n      navigator.msGetUserMedia\n\n      if(navigator.getUserMedia) {  \n        navigator.getUserMedia(\n          { video: true},\n          stream => {\n            video.current.srcObject = stream\n            video.current.addEventListener('loadeddata', resolve)\n          },\n          error => reject(error)\n        )\n      }\n      else {\n        reject()\n      }\n    })\n  }\n\n  const train = async label => {\n    console.log(`[${label}] Dang train cho may mat cua ban... `)\n    for (let i = 0; i <TRAINING_TIMES; i++) {\n      console.log(`progress ${parseInt((i+1) / TRAINING_TIMES * 100)}% `);\n      await training(label)\n    }\n  }\n\n/**\n * Buoc 1: Train cho may khuon mat khong cham tay\n * Buoc 2: Train cho may khuon mat co cham tay\n * Buoc 3: Lay hinh anh hien tai, phan tich va so sanh voi data da hoc truoc do\n * ==> Neu ma matching voi data khuon mat cham tay ==> Canh bao\n * @param {*} label\n */\n  const training = label => {\n    return new Promise(async resolve => {\n      const embedding = mobilenetModule.current.infer(\n        video.current,\n        true\n      )\n      classifier.current.addExample(embedding,label)\n      await sleep(100)\n      resolve()\n    })\n  }\n\n  const run = async () => {\n    const embedding = mobilenetModule.current.infer(\n      video.current,\n      true\n    )\n    const result = await classifier.current.predictClass(embedding)\n    \n    if(result.label === TOUCHED_LABEL &&\n      result.confidences[result.label] > TOUCHED_CONFIDENCE\n      ) {\n        console.log('Touched')\n        if (canPlaySound.current) {\n          canPlaySound.current =false\n          sound.play();\n        }\n\n        notify('Bo tay ra', { body: 'Ban vua cham tay vao mat!!!' });\n        setTouched(true)\n\n        initNotifications({ cooldown: 3000 })\n      }\n    else {\n        console.log('No Touch')\n        setTouched(false)\n      }\n\n    await sleep(200)\n\n    run()\n  }\n\n  const sleep = (ms = 0) => {\n    return  new Promise(resolve => setTimeout(resolve, ms))\n  }\n  useEffect(() => {\n    init();\n\n    sound.on('end', function(){\n      canPlaySound.current = true\n    });\n\n    //clean up\n    return () => {\n\n    }\n  }, [])\n\n  return (\n    <div className={`main ${touched ? 'touched' : ''}`}>\n      <h1>HELLO</h1>\n      <video\n      ref={video}\n        className=\"video\"\n        autoPlay\n      />\n\n      <div className=\"control\">\n        <button  className=\"btn\" onClick={() => train(NOT_TOUCH_LABEL)}>Train 1</button>\n        <button  className=\"btn\" onClick={() => train(TOUCHED_LABEL)}>Train 2</button>\n        <button  className=\"btn\" onClick={() => run()}>Run</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}